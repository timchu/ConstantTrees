\section{Conclusions}
There exist a plethora of algorithms that run quickly on low arboricity
graphs. Leveraging low arboricity and the fast run time of these
algorithms has been done by~\cite{AbrahamDKKP16}, to approximate maximum
bipartite undirected flow quickly.

It is an open question how these fast
algorithms on low arboricity graphs can be used to speed up a variety of
other classical algorithms relevant in the field, possibly including
many algorithms that rely on Schur complementing (such as Effective
Resistance estimation, Matrix determinant calculation, computing Sparse Cholesky factoizations, and
more). \tim{cite}

It also remains an open question whether other classes of sparsifiers,
such as those by Spielman and Teng~\cite{SpielmanT04}, those by
Batson, Spielman, and Srivastava~\cite{BatsonSS09}, dynamic sparsifiers,
  and others are necessarily low arboricity graphs. Lee et. al. recently
  showed how to find Batson-Spielman-Srivastava sparsifiers in nearly
  linear time. Ideas based on Spielman and Teng spectral sparsifiers have been used to create
  fast max-flow algorithms \tim{Citation for both needed}. It would be
  interesting to determine whether or not these sparsifiers have low
  arboricity, and if so, what kinds of fast algorithms can be run on
  them.

Thanks to Michael Cohen, Jakub Pachocki, Richard Peng, and Gary Miller
for helpful conversations. As mentioned earlier, an earlier version of
this work from 2014 with Michael Cohen, Jakub Pachocki, and Richard Peng
(which was never published until August 2018) contained many 
of the main results, and was recently posted to
ArXiv. This paper represents a modernized version of the same result,
which was never submitted for publication outside of ArXiv, plus a few extra lemmas.
